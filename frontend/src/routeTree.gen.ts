/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ShareTokenImport } from './routes/share/$token'
import { Route as LanguageVbncImport } from './routes/language/vbnc'
import { Route as LanguageTypescriptImport } from './routes/language/typescript'
import { Route as LanguageSwiftImport } from './routes/language/swift'
import { Route as LanguageSqlImport } from './routes/language/sql'
import { Route as LanguageScalaImport } from './routes/language/scala'
import { Route as LanguageRustImport } from './routes/language/rust'
import { Route as LanguageRubyImport } from './routes/language/ruby'
import { Route as LanguageRImport } from './routes/language/r'
import { Route as LanguagePythonImport } from './routes/language/python'
import { Route as LanguagePrologImport } from './routes/language/prolog'
import { Route as LanguagePhpImport } from './routes/language/php'
import { Route as LanguagePerlImport } from './routes/language/perl'
import { Route as LanguagePascalImport } from './routes/language/pascal'
import { Route as LanguageOctaveImport } from './routes/language/octave'
import { Route as LanguageOcamlImport } from './routes/language/ocaml'
import { Route as LanguageObjectiveCImport } from './routes/language/objective-c'
import { Route as LanguageNimImport } from './routes/language/nim'
import { Route as LanguageLuaImport } from './routes/language/lua'
import { Route as LanguageLispImport } from './routes/language/lisp'
import { Route as LanguageKotlinImport } from './routes/language/kotlin'
import { Route as LanguageJavascriptImport } from './routes/language/javascript'
import { Route as LanguageJavaImport } from './routes/language/java'
import { Route as LanguageHaskellImport } from './routes/language/haskell'
import { Route as LanguageGroovyImport } from './routes/language/groovy'
import { Route as LanguageGoImport } from './routes/language/go'
import { Route as LanguageFortranImport } from './routes/language/fortran'
import { Route as LanguageErlangImport } from './routes/language/erlang'
import { Route as LanguageElixirImport } from './routes/language/elixir'
import { Route as LanguageDImport } from './routes/language/d'
import { Route as LanguageCppImport } from './routes/language/cpp'
import { Route as LanguageCobolImport } from './routes/language/cobol'
import { Route as LanguageClojureImport } from './routes/language/clojure'
import { Route as LanguageCImport } from './routes/language/c'
import { Route as LanguageBashImport } from './routes/language/bash'
import { Route as LanguageAssemblyImport } from './routes/language/assembly'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShareTokenRoute = ShareTokenImport.update({
  id: '/share/$token',
  path: '/share/$token',
  getParentRoute: () => rootRoute,
} as any)

const LanguageVbncRoute = LanguageVbncImport.update({
  id: '/language/vbnc',
  path: '/language/vbnc',
  getParentRoute: () => rootRoute,
} as any)

const LanguageTypescriptRoute = LanguageTypescriptImport.update({
  id: '/language/typescript',
  path: '/language/typescript',
  getParentRoute: () => rootRoute,
} as any)

const LanguageSwiftRoute = LanguageSwiftImport.update({
  id: '/language/swift',
  path: '/language/swift',
  getParentRoute: () => rootRoute,
} as any)

const LanguageSqlRoute = LanguageSqlImport.update({
  id: '/language/sql',
  path: '/language/sql',
  getParentRoute: () => rootRoute,
} as any)

const LanguageScalaRoute = LanguageScalaImport.update({
  id: '/language/scala',
  path: '/language/scala',
  getParentRoute: () => rootRoute,
} as any)

const LanguageRustRoute = LanguageRustImport.update({
  id: '/language/rust',
  path: '/language/rust',
  getParentRoute: () => rootRoute,
} as any)

const LanguageRubyRoute = LanguageRubyImport.update({
  id: '/language/ruby',
  path: '/language/ruby',
  getParentRoute: () => rootRoute,
} as any)

const LanguageRRoute = LanguageRImport.update({
  id: '/language/r',
  path: '/language/r',
  getParentRoute: () => rootRoute,
} as any)

const LanguagePythonRoute = LanguagePythonImport.update({
  id: '/language/python',
  path: '/language/python',
  getParentRoute: () => rootRoute,
} as any)

const LanguagePrologRoute = LanguagePrologImport.update({
  id: '/language/prolog',
  path: '/language/prolog',
  getParentRoute: () => rootRoute,
} as any)

const LanguagePhpRoute = LanguagePhpImport.update({
  id: '/language/php',
  path: '/language/php',
  getParentRoute: () => rootRoute,
} as any)

const LanguagePerlRoute = LanguagePerlImport.update({
  id: '/language/perl',
  path: '/language/perl',
  getParentRoute: () => rootRoute,
} as any)

const LanguagePascalRoute = LanguagePascalImport.update({
  id: '/language/pascal',
  path: '/language/pascal',
  getParentRoute: () => rootRoute,
} as any)

const LanguageOctaveRoute = LanguageOctaveImport.update({
  id: '/language/octave',
  path: '/language/octave',
  getParentRoute: () => rootRoute,
} as any)

const LanguageOcamlRoute = LanguageOcamlImport.update({
  id: '/language/ocaml',
  path: '/language/ocaml',
  getParentRoute: () => rootRoute,
} as any)

const LanguageObjectiveCRoute = LanguageObjectiveCImport.update({
  id: '/language/objective-c',
  path: '/language/objective-c',
  getParentRoute: () => rootRoute,
} as any)

const LanguageNimRoute = LanguageNimImport.update({
  id: '/language/nim',
  path: '/language/nim',
  getParentRoute: () => rootRoute,
} as any)

const LanguageLuaRoute = LanguageLuaImport.update({
  id: '/language/lua',
  path: '/language/lua',
  getParentRoute: () => rootRoute,
} as any)

const LanguageLispRoute = LanguageLispImport.update({
  id: '/language/lisp',
  path: '/language/lisp',
  getParentRoute: () => rootRoute,
} as any)

const LanguageKotlinRoute = LanguageKotlinImport.update({
  id: '/language/kotlin',
  path: '/language/kotlin',
  getParentRoute: () => rootRoute,
} as any)

const LanguageJavascriptRoute = LanguageJavascriptImport.update({
  id: '/language/javascript',
  path: '/language/javascript',
  getParentRoute: () => rootRoute,
} as any)

const LanguageJavaRoute = LanguageJavaImport.update({
  id: '/language/java',
  path: '/language/java',
  getParentRoute: () => rootRoute,
} as any)

const LanguageHaskellRoute = LanguageHaskellImport.update({
  id: '/language/haskell',
  path: '/language/haskell',
  getParentRoute: () => rootRoute,
} as any)

const LanguageGroovyRoute = LanguageGroovyImport.update({
  id: '/language/groovy',
  path: '/language/groovy',
  getParentRoute: () => rootRoute,
} as any)

const LanguageGoRoute = LanguageGoImport.update({
  id: '/language/go',
  path: '/language/go',
  getParentRoute: () => rootRoute,
} as any)

const LanguageFortranRoute = LanguageFortranImport.update({
  id: '/language/fortran',
  path: '/language/fortran',
  getParentRoute: () => rootRoute,
} as any)

const LanguageErlangRoute = LanguageErlangImport.update({
  id: '/language/erlang',
  path: '/language/erlang',
  getParentRoute: () => rootRoute,
} as any)

const LanguageElixirRoute = LanguageElixirImport.update({
  id: '/language/elixir',
  path: '/language/elixir',
  getParentRoute: () => rootRoute,
} as any)

const LanguageDRoute = LanguageDImport.update({
  id: '/language/d',
  path: '/language/d',
  getParentRoute: () => rootRoute,
} as any)

const LanguageCppRoute = LanguageCppImport.update({
  id: '/language/cpp',
  path: '/language/cpp',
  getParentRoute: () => rootRoute,
} as any)

const LanguageCobolRoute = LanguageCobolImport.update({
  id: '/language/cobol',
  path: '/language/cobol',
  getParentRoute: () => rootRoute,
} as any)

const LanguageClojureRoute = LanguageClojureImport.update({
  id: '/language/clojure',
  path: '/language/clojure',
  getParentRoute: () => rootRoute,
} as any)

const LanguageCRoute = LanguageCImport.update({
  id: '/language/c',
  path: '/language/c',
  getParentRoute: () => rootRoute,
} as any)

const LanguageBashRoute = LanguageBashImport.update({
  id: '/language/bash',
  path: '/language/bash',
  getParentRoute: () => rootRoute,
} as any)

const LanguageAssemblyRoute = LanguageAssemblyImport.update({
  id: '/language/assembly',
  path: '/language/assembly',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/language/assembly': {
      id: '/language/assembly'
      path: '/language/assembly'
      fullPath: '/language/assembly'
      preLoaderRoute: typeof LanguageAssemblyImport
      parentRoute: typeof rootRoute
    }
    '/language/bash': {
      id: '/language/bash'
      path: '/language/bash'
      fullPath: '/language/bash'
      preLoaderRoute: typeof LanguageBashImport
      parentRoute: typeof rootRoute
    }
    '/language/c': {
      id: '/language/c'
      path: '/language/c'
      fullPath: '/language/c'
      preLoaderRoute: typeof LanguageCImport
      parentRoute: typeof rootRoute
    }
    '/language/clojure': {
      id: '/language/clojure'
      path: '/language/clojure'
      fullPath: '/language/clojure'
      preLoaderRoute: typeof LanguageClojureImport
      parentRoute: typeof rootRoute
    }
    '/language/cobol': {
      id: '/language/cobol'
      path: '/language/cobol'
      fullPath: '/language/cobol'
      preLoaderRoute: typeof LanguageCobolImport
      parentRoute: typeof rootRoute
    }
    '/language/cpp': {
      id: '/language/cpp'
      path: '/language/cpp'
      fullPath: '/language/cpp'
      preLoaderRoute: typeof LanguageCppImport
      parentRoute: typeof rootRoute
    }
    '/language/d': {
      id: '/language/d'
      path: '/language/d'
      fullPath: '/language/d'
      preLoaderRoute: typeof LanguageDImport
      parentRoute: typeof rootRoute
    }
    '/language/elixir': {
      id: '/language/elixir'
      path: '/language/elixir'
      fullPath: '/language/elixir'
      preLoaderRoute: typeof LanguageElixirImport
      parentRoute: typeof rootRoute
    }
    '/language/erlang': {
      id: '/language/erlang'
      path: '/language/erlang'
      fullPath: '/language/erlang'
      preLoaderRoute: typeof LanguageErlangImport
      parentRoute: typeof rootRoute
    }
    '/language/fortran': {
      id: '/language/fortran'
      path: '/language/fortran'
      fullPath: '/language/fortran'
      preLoaderRoute: typeof LanguageFortranImport
      parentRoute: typeof rootRoute
    }
    '/language/go': {
      id: '/language/go'
      path: '/language/go'
      fullPath: '/language/go'
      preLoaderRoute: typeof LanguageGoImport
      parentRoute: typeof rootRoute
    }
    '/language/groovy': {
      id: '/language/groovy'
      path: '/language/groovy'
      fullPath: '/language/groovy'
      preLoaderRoute: typeof LanguageGroovyImport
      parentRoute: typeof rootRoute
    }
    '/language/haskell': {
      id: '/language/haskell'
      path: '/language/haskell'
      fullPath: '/language/haskell'
      preLoaderRoute: typeof LanguageHaskellImport
      parentRoute: typeof rootRoute
    }
    '/language/java': {
      id: '/language/java'
      path: '/language/java'
      fullPath: '/language/java'
      preLoaderRoute: typeof LanguageJavaImport
      parentRoute: typeof rootRoute
    }
    '/language/javascript': {
      id: '/language/javascript'
      path: '/language/javascript'
      fullPath: '/language/javascript'
      preLoaderRoute: typeof LanguageJavascriptImport
      parentRoute: typeof rootRoute
    }
    '/language/kotlin': {
      id: '/language/kotlin'
      path: '/language/kotlin'
      fullPath: '/language/kotlin'
      preLoaderRoute: typeof LanguageKotlinImport
      parentRoute: typeof rootRoute
    }
    '/language/lisp': {
      id: '/language/lisp'
      path: '/language/lisp'
      fullPath: '/language/lisp'
      preLoaderRoute: typeof LanguageLispImport
      parentRoute: typeof rootRoute
    }
    '/language/lua': {
      id: '/language/lua'
      path: '/language/lua'
      fullPath: '/language/lua'
      preLoaderRoute: typeof LanguageLuaImport
      parentRoute: typeof rootRoute
    }
    '/language/nim': {
      id: '/language/nim'
      path: '/language/nim'
      fullPath: '/language/nim'
      preLoaderRoute: typeof LanguageNimImport
      parentRoute: typeof rootRoute
    }
    '/language/objective-c': {
      id: '/language/objective-c'
      path: '/language/objective-c'
      fullPath: '/language/objective-c'
      preLoaderRoute: typeof LanguageObjectiveCImport
      parentRoute: typeof rootRoute
    }
    '/language/ocaml': {
      id: '/language/ocaml'
      path: '/language/ocaml'
      fullPath: '/language/ocaml'
      preLoaderRoute: typeof LanguageOcamlImport
      parentRoute: typeof rootRoute
    }
    '/language/octave': {
      id: '/language/octave'
      path: '/language/octave'
      fullPath: '/language/octave'
      preLoaderRoute: typeof LanguageOctaveImport
      parentRoute: typeof rootRoute
    }
    '/language/pascal': {
      id: '/language/pascal'
      path: '/language/pascal'
      fullPath: '/language/pascal'
      preLoaderRoute: typeof LanguagePascalImport
      parentRoute: typeof rootRoute
    }
    '/language/perl': {
      id: '/language/perl'
      path: '/language/perl'
      fullPath: '/language/perl'
      preLoaderRoute: typeof LanguagePerlImport
      parentRoute: typeof rootRoute
    }
    '/language/php': {
      id: '/language/php'
      path: '/language/php'
      fullPath: '/language/php'
      preLoaderRoute: typeof LanguagePhpImport
      parentRoute: typeof rootRoute
    }
    '/language/prolog': {
      id: '/language/prolog'
      path: '/language/prolog'
      fullPath: '/language/prolog'
      preLoaderRoute: typeof LanguagePrologImport
      parentRoute: typeof rootRoute
    }
    '/language/python': {
      id: '/language/python'
      path: '/language/python'
      fullPath: '/language/python'
      preLoaderRoute: typeof LanguagePythonImport
      parentRoute: typeof rootRoute
    }
    '/language/r': {
      id: '/language/r'
      path: '/language/r'
      fullPath: '/language/r'
      preLoaderRoute: typeof LanguageRImport
      parentRoute: typeof rootRoute
    }
    '/language/ruby': {
      id: '/language/ruby'
      path: '/language/ruby'
      fullPath: '/language/ruby'
      preLoaderRoute: typeof LanguageRubyImport
      parentRoute: typeof rootRoute
    }
    '/language/rust': {
      id: '/language/rust'
      path: '/language/rust'
      fullPath: '/language/rust'
      preLoaderRoute: typeof LanguageRustImport
      parentRoute: typeof rootRoute
    }
    '/language/scala': {
      id: '/language/scala'
      path: '/language/scala'
      fullPath: '/language/scala'
      preLoaderRoute: typeof LanguageScalaImport
      parentRoute: typeof rootRoute
    }
    '/language/sql': {
      id: '/language/sql'
      path: '/language/sql'
      fullPath: '/language/sql'
      preLoaderRoute: typeof LanguageSqlImport
      parentRoute: typeof rootRoute
    }
    '/language/swift': {
      id: '/language/swift'
      path: '/language/swift'
      fullPath: '/language/swift'
      preLoaderRoute: typeof LanguageSwiftImport
      parentRoute: typeof rootRoute
    }
    '/language/typescript': {
      id: '/language/typescript'
      path: '/language/typescript'
      fullPath: '/language/typescript'
      preLoaderRoute: typeof LanguageTypescriptImport
      parentRoute: typeof rootRoute
    }
    '/language/vbnc': {
      id: '/language/vbnc'
      path: '/language/vbnc'
      fullPath: '/language/vbnc'
      preLoaderRoute: typeof LanguageVbncImport
      parentRoute: typeof rootRoute
    }
    '/share/$token': {
      id: '/share/$token'
      path: '/share/$token'
      fullPath: '/share/$token'
      preLoaderRoute: typeof ShareTokenImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/language/assembly': typeof LanguageAssemblyRoute
  '/language/bash': typeof LanguageBashRoute
  '/language/c': typeof LanguageCRoute
  '/language/clojure': typeof LanguageClojureRoute
  '/language/cobol': typeof LanguageCobolRoute
  '/language/cpp': typeof LanguageCppRoute
  '/language/d': typeof LanguageDRoute
  '/language/elixir': typeof LanguageElixirRoute
  '/language/erlang': typeof LanguageErlangRoute
  '/language/fortran': typeof LanguageFortranRoute
  '/language/go': typeof LanguageGoRoute
  '/language/groovy': typeof LanguageGroovyRoute
  '/language/haskell': typeof LanguageHaskellRoute
  '/language/java': typeof LanguageJavaRoute
  '/language/javascript': typeof LanguageJavascriptRoute
  '/language/kotlin': typeof LanguageKotlinRoute
  '/language/lisp': typeof LanguageLispRoute
  '/language/lua': typeof LanguageLuaRoute
  '/language/nim': typeof LanguageNimRoute
  '/language/objective-c': typeof LanguageObjectiveCRoute
  '/language/ocaml': typeof LanguageOcamlRoute
  '/language/octave': typeof LanguageOctaveRoute
  '/language/pascal': typeof LanguagePascalRoute
  '/language/perl': typeof LanguagePerlRoute
  '/language/php': typeof LanguagePhpRoute
  '/language/prolog': typeof LanguagePrologRoute
  '/language/python': typeof LanguagePythonRoute
  '/language/r': typeof LanguageRRoute
  '/language/ruby': typeof LanguageRubyRoute
  '/language/rust': typeof LanguageRustRoute
  '/language/scala': typeof LanguageScalaRoute
  '/language/sql': typeof LanguageSqlRoute
  '/language/swift': typeof LanguageSwiftRoute
  '/language/typescript': typeof LanguageTypescriptRoute
  '/language/vbnc': typeof LanguageVbncRoute
  '/share/$token': typeof ShareTokenRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/language/assembly': typeof LanguageAssemblyRoute
  '/language/bash': typeof LanguageBashRoute
  '/language/c': typeof LanguageCRoute
  '/language/clojure': typeof LanguageClojureRoute
  '/language/cobol': typeof LanguageCobolRoute
  '/language/cpp': typeof LanguageCppRoute
  '/language/d': typeof LanguageDRoute
  '/language/elixir': typeof LanguageElixirRoute
  '/language/erlang': typeof LanguageErlangRoute
  '/language/fortran': typeof LanguageFortranRoute
  '/language/go': typeof LanguageGoRoute
  '/language/groovy': typeof LanguageGroovyRoute
  '/language/haskell': typeof LanguageHaskellRoute
  '/language/java': typeof LanguageJavaRoute
  '/language/javascript': typeof LanguageJavascriptRoute
  '/language/kotlin': typeof LanguageKotlinRoute
  '/language/lisp': typeof LanguageLispRoute
  '/language/lua': typeof LanguageLuaRoute
  '/language/nim': typeof LanguageNimRoute
  '/language/objective-c': typeof LanguageObjectiveCRoute
  '/language/ocaml': typeof LanguageOcamlRoute
  '/language/octave': typeof LanguageOctaveRoute
  '/language/pascal': typeof LanguagePascalRoute
  '/language/perl': typeof LanguagePerlRoute
  '/language/php': typeof LanguagePhpRoute
  '/language/prolog': typeof LanguagePrologRoute
  '/language/python': typeof LanguagePythonRoute
  '/language/r': typeof LanguageRRoute
  '/language/ruby': typeof LanguageRubyRoute
  '/language/rust': typeof LanguageRustRoute
  '/language/scala': typeof LanguageScalaRoute
  '/language/sql': typeof LanguageSqlRoute
  '/language/swift': typeof LanguageSwiftRoute
  '/language/typescript': typeof LanguageTypescriptRoute
  '/language/vbnc': typeof LanguageVbncRoute
  '/share/$token': typeof ShareTokenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/language/assembly': typeof LanguageAssemblyRoute
  '/language/bash': typeof LanguageBashRoute
  '/language/c': typeof LanguageCRoute
  '/language/clojure': typeof LanguageClojureRoute
  '/language/cobol': typeof LanguageCobolRoute
  '/language/cpp': typeof LanguageCppRoute
  '/language/d': typeof LanguageDRoute
  '/language/elixir': typeof LanguageElixirRoute
  '/language/erlang': typeof LanguageErlangRoute
  '/language/fortran': typeof LanguageFortranRoute
  '/language/go': typeof LanguageGoRoute
  '/language/groovy': typeof LanguageGroovyRoute
  '/language/haskell': typeof LanguageHaskellRoute
  '/language/java': typeof LanguageJavaRoute
  '/language/javascript': typeof LanguageJavascriptRoute
  '/language/kotlin': typeof LanguageKotlinRoute
  '/language/lisp': typeof LanguageLispRoute
  '/language/lua': typeof LanguageLuaRoute
  '/language/nim': typeof LanguageNimRoute
  '/language/objective-c': typeof LanguageObjectiveCRoute
  '/language/ocaml': typeof LanguageOcamlRoute
  '/language/octave': typeof LanguageOctaveRoute
  '/language/pascal': typeof LanguagePascalRoute
  '/language/perl': typeof LanguagePerlRoute
  '/language/php': typeof LanguagePhpRoute
  '/language/prolog': typeof LanguagePrologRoute
  '/language/python': typeof LanguagePythonRoute
  '/language/r': typeof LanguageRRoute
  '/language/ruby': typeof LanguageRubyRoute
  '/language/rust': typeof LanguageRustRoute
  '/language/scala': typeof LanguageScalaRoute
  '/language/sql': typeof LanguageSqlRoute
  '/language/swift': typeof LanguageSwiftRoute
  '/language/typescript': typeof LanguageTypescriptRoute
  '/language/vbnc': typeof LanguageVbncRoute
  '/share/$token': typeof ShareTokenRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/language/assembly'
    | '/language/bash'
    | '/language/c'
    | '/language/clojure'
    | '/language/cobol'
    | '/language/cpp'
    | '/language/d'
    | '/language/elixir'
    | '/language/erlang'
    | '/language/fortran'
    | '/language/go'
    | '/language/groovy'
    | '/language/haskell'
    | '/language/java'
    | '/language/javascript'
    | '/language/kotlin'
    | '/language/lisp'
    | '/language/lua'
    | '/language/nim'
    | '/language/objective-c'
    | '/language/ocaml'
    | '/language/octave'
    | '/language/pascal'
    | '/language/perl'
    | '/language/php'
    | '/language/prolog'
    | '/language/python'
    | '/language/r'
    | '/language/ruby'
    | '/language/rust'
    | '/language/scala'
    | '/language/sql'
    | '/language/swift'
    | '/language/typescript'
    | '/language/vbnc'
    | '/share/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/language/assembly'
    | '/language/bash'
    | '/language/c'
    | '/language/clojure'
    | '/language/cobol'
    | '/language/cpp'
    | '/language/d'
    | '/language/elixir'
    | '/language/erlang'
    | '/language/fortran'
    | '/language/go'
    | '/language/groovy'
    | '/language/haskell'
    | '/language/java'
    | '/language/javascript'
    | '/language/kotlin'
    | '/language/lisp'
    | '/language/lua'
    | '/language/nim'
    | '/language/objective-c'
    | '/language/ocaml'
    | '/language/octave'
    | '/language/pascal'
    | '/language/perl'
    | '/language/php'
    | '/language/prolog'
    | '/language/python'
    | '/language/r'
    | '/language/ruby'
    | '/language/rust'
    | '/language/scala'
    | '/language/sql'
    | '/language/swift'
    | '/language/typescript'
    | '/language/vbnc'
    | '/share/$token'
  id:
    | '__root__'
    | '/'
    | '/language/assembly'
    | '/language/bash'
    | '/language/c'
    | '/language/clojure'
    | '/language/cobol'
    | '/language/cpp'
    | '/language/d'
    | '/language/elixir'
    | '/language/erlang'
    | '/language/fortran'
    | '/language/go'
    | '/language/groovy'
    | '/language/haskell'
    | '/language/java'
    | '/language/javascript'
    | '/language/kotlin'
    | '/language/lisp'
    | '/language/lua'
    | '/language/nim'
    | '/language/objective-c'
    | '/language/ocaml'
    | '/language/octave'
    | '/language/pascal'
    | '/language/perl'
    | '/language/php'
    | '/language/prolog'
    | '/language/python'
    | '/language/r'
    | '/language/ruby'
    | '/language/rust'
    | '/language/scala'
    | '/language/sql'
    | '/language/swift'
    | '/language/typescript'
    | '/language/vbnc'
    | '/share/$token'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LanguageAssemblyRoute: typeof LanguageAssemblyRoute
  LanguageBashRoute: typeof LanguageBashRoute
  LanguageCRoute: typeof LanguageCRoute
  LanguageClojureRoute: typeof LanguageClojureRoute
  LanguageCobolRoute: typeof LanguageCobolRoute
  LanguageCppRoute: typeof LanguageCppRoute
  LanguageDRoute: typeof LanguageDRoute
  LanguageElixirRoute: typeof LanguageElixirRoute
  LanguageErlangRoute: typeof LanguageErlangRoute
  LanguageFortranRoute: typeof LanguageFortranRoute
  LanguageGoRoute: typeof LanguageGoRoute
  LanguageGroovyRoute: typeof LanguageGroovyRoute
  LanguageHaskellRoute: typeof LanguageHaskellRoute
  LanguageJavaRoute: typeof LanguageJavaRoute
  LanguageJavascriptRoute: typeof LanguageJavascriptRoute
  LanguageKotlinRoute: typeof LanguageKotlinRoute
  LanguageLispRoute: typeof LanguageLispRoute
  LanguageLuaRoute: typeof LanguageLuaRoute
  LanguageNimRoute: typeof LanguageNimRoute
  LanguageObjectiveCRoute: typeof LanguageObjectiveCRoute
  LanguageOcamlRoute: typeof LanguageOcamlRoute
  LanguageOctaveRoute: typeof LanguageOctaveRoute
  LanguagePascalRoute: typeof LanguagePascalRoute
  LanguagePerlRoute: typeof LanguagePerlRoute
  LanguagePhpRoute: typeof LanguagePhpRoute
  LanguagePrologRoute: typeof LanguagePrologRoute
  LanguagePythonRoute: typeof LanguagePythonRoute
  LanguageRRoute: typeof LanguageRRoute
  LanguageRubyRoute: typeof LanguageRubyRoute
  LanguageRustRoute: typeof LanguageRustRoute
  LanguageScalaRoute: typeof LanguageScalaRoute
  LanguageSqlRoute: typeof LanguageSqlRoute
  LanguageSwiftRoute: typeof LanguageSwiftRoute
  LanguageTypescriptRoute: typeof LanguageTypescriptRoute
  LanguageVbncRoute: typeof LanguageVbncRoute
  ShareTokenRoute: typeof ShareTokenRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LanguageAssemblyRoute: LanguageAssemblyRoute,
  LanguageBashRoute: LanguageBashRoute,
  LanguageCRoute: LanguageCRoute,
  LanguageClojureRoute: LanguageClojureRoute,
  LanguageCobolRoute: LanguageCobolRoute,
  LanguageCppRoute: LanguageCppRoute,
  LanguageDRoute: LanguageDRoute,
  LanguageElixirRoute: LanguageElixirRoute,
  LanguageErlangRoute: LanguageErlangRoute,
  LanguageFortranRoute: LanguageFortranRoute,
  LanguageGoRoute: LanguageGoRoute,
  LanguageGroovyRoute: LanguageGroovyRoute,
  LanguageHaskellRoute: LanguageHaskellRoute,
  LanguageJavaRoute: LanguageJavaRoute,
  LanguageJavascriptRoute: LanguageJavascriptRoute,
  LanguageKotlinRoute: LanguageKotlinRoute,
  LanguageLispRoute: LanguageLispRoute,
  LanguageLuaRoute: LanguageLuaRoute,
  LanguageNimRoute: LanguageNimRoute,
  LanguageObjectiveCRoute: LanguageObjectiveCRoute,
  LanguageOcamlRoute: LanguageOcamlRoute,
  LanguageOctaveRoute: LanguageOctaveRoute,
  LanguagePascalRoute: LanguagePascalRoute,
  LanguagePerlRoute: LanguagePerlRoute,
  LanguagePhpRoute: LanguagePhpRoute,
  LanguagePrologRoute: LanguagePrologRoute,
  LanguagePythonRoute: LanguagePythonRoute,
  LanguageRRoute: LanguageRRoute,
  LanguageRubyRoute: LanguageRubyRoute,
  LanguageRustRoute: LanguageRustRoute,
  LanguageScalaRoute: LanguageScalaRoute,
  LanguageSqlRoute: LanguageSqlRoute,
  LanguageSwiftRoute: LanguageSwiftRoute,
  LanguageTypescriptRoute: LanguageTypescriptRoute,
  LanguageVbncRoute: LanguageVbncRoute,
  ShareTokenRoute: ShareTokenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/language/assembly",
        "/language/bash",
        "/language/c",
        "/language/clojure",
        "/language/cobol",
        "/language/cpp",
        "/language/d",
        "/language/elixir",
        "/language/erlang",
        "/language/fortran",
        "/language/go",
        "/language/groovy",
        "/language/haskell",
        "/language/java",
        "/language/javascript",
        "/language/kotlin",
        "/language/lisp",
        "/language/lua",
        "/language/nim",
        "/language/objective-c",
        "/language/ocaml",
        "/language/octave",
        "/language/pascal",
        "/language/perl",
        "/language/php",
        "/language/prolog",
        "/language/python",
        "/language/r",
        "/language/ruby",
        "/language/rust",
        "/language/scala",
        "/language/sql",
        "/language/swift",
        "/language/typescript",
        "/language/vbnc",
        "/share/$token"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/language/assembly": {
      "filePath": "language/assembly.tsx"
    },
    "/language/bash": {
      "filePath": "language/bash.tsx"
    },
    "/language/c": {
      "filePath": "language/c.tsx"
    },
    "/language/clojure": {
      "filePath": "language/clojure.tsx"
    },
    "/language/cobol": {
      "filePath": "language/cobol.tsx"
    },
    "/language/cpp": {
      "filePath": "language/cpp.tsx"
    },
    "/language/d": {
      "filePath": "language/d.tsx"
    },
    "/language/elixir": {
      "filePath": "language/elixir.tsx"
    },
    "/language/erlang": {
      "filePath": "language/erlang.tsx"
    },
    "/language/fortran": {
      "filePath": "language/fortran.tsx"
    },
    "/language/go": {
      "filePath": "language/go.tsx"
    },
    "/language/groovy": {
      "filePath": "language/groovy.tsx"
    },
    "/language/haskell": {
      "filePath": "language/haskell.tsx"
    },
    "/language/java": {
      "filePath": "language/java.tsx"
    },
    "/language/javascript": {
      "filePath": "language/javascript.tsx"
    },
    "/language/kotlin": {
      "filePath": "language/kotlin.tsx"
    },
    "/language/lisp": {
      "filePath": "language/lisp.tsx"
    },
    "/language/lua": {
      "filePath": "language/lua.tsx"
    },
    "/language/nim": {
      "filePath": "language/nim.tsx"
    },
    "/language/objective-c": {
      "filePath": "language/objective-c.tsx"
    },
    "/language/ocaml": {
      "filePath": "language/ocaml.tsx"
    },
    "/language/octave": {
      "filePath": "language/octave.tsx"
    },
    "/language/pascal": {
      "filePath": "language/pascal.tsx"
    },
    "/language/perl": {
      "filePath": "language/perl.tsx"
    },
    "/language/php": {
      "filePath": "language/php.tsx"
    },
    "/language/prolog": {
      "filePath": "language/prolog.tsx"
    },
    "/language/python": {
      "filePath": "language/python.tsx"
    },
    "/language/r": {
      "filePath": "language/r.tsx"
    },
    "/language/ruby": {
      "filePath": "language/ruby.tsx"
    },
    "/language/rust": {
      "filePath": "language/rust.tsx"
    },
    "/language/scala": {
      "filePath": "language/scala.tsx"
    },
    "/language/sql": {
      "filePath": "language/sql.tsx"
    },
    "/language/swift": {
      "filePath": "language/swift.tsx"
    },
    "/language/typescript": {
      "filePath": "language/typescript.tsx"
    },
    "/language/vbnc": {
      "filePath": "language/vbnc.tsx"
    },
    "/share/$token": {
      "filePath": "share/$token.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
