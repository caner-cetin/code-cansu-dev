// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubmission = `-- name: CreateSubmission :exec
INSERT INTO public.submissions
(id, source_code, language_id, "stdin", "stdout", status_id, memory, memory_history, memory_min, memory_max, kernel_stack_bytes, page_faults, major_page_faults, io_read_bytes, io_write_bytes, io_read_count, io_write_count, oom, oom_kill, voluntary_context_switch, involuntary_context_switch, "token", max_file_size, exit_code, timing_real, compiler_options, command_line_arguments, additional_files, created_at, updated_at, stderr, cpu_history, cpu_average, cpu_max, timing_user, timing_sys)
VALUES(nextval('submissions_id_seq'::regclass), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35)
`

type CreateSubmissionParams struct {
	SourceCode               pgtype.Text
	LanguageID               pgtype.Int4
	Stdin                    pgtype.Text
	Stdout                   pgtype.Text
	StatusID                 pgtype.Int4
	Memory                   pgtype.Int4
	MemoryHistory            interface{}
	MemoryMin                pgtype.Int4
	MemoryMax                pgtype.Int4
	KernelStackBytes         pgtype.Int4
	PageFaults               pgtype.Int4
	MajorPageFaults          pgtype.Int4
	IoReadBytes              pgtype.Int4
	IoWriteBytes             pgtype.Int4
	IoReadCount              pgtype.Int4
	IoWriteCount             pgtype.Int4
	Oom                      pgtype.Int4
	OomKill                  pgtype.Int4
	VoluntaryContextSwitch   pgtype.Int4
	InvoluntaryContextSwitch pgtype.Int4
	Token                    pgtype.Text
	MaxFileSize              pgtype.Int4
	ExitCode                 pgtype.Int4
	TimingReal               pgtype.Float4
	CompilerOptions          pgtype.Text
	CommandLineArguments     pgtype.Text
	AdditionalFiles          []byte
	CreatedAt                pgtype.Timestamp
	UpdatedAt                pgtype.Timestamp
	Stderr                   pgtype.Text
	CpuHistory               []byte
	CpuAverage               pgtype.Float4
	CpuMax                   pgtype.Float4
	TimingUser               pgtype.Float4
	TimingSys                pgtype.Float4
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) error {
	_, err := q.db.Exec(ctx, createSubmission,
		arg.SourceCode,
		arg.LanguageID,
		arg.Stdin,
		arg.Stdout,
		arg.StatusID,
		arg.Memory,
		arg.MemoryHistory,
		arg.MemoryMin,
		arg.MemoryMax,
		arg.KernelStackBytes,
		arg.PageFaults,
		arg.MajorPageFaults,
		arg.IoReadBytes,
		arg.IoWriteBytes,
		arg.IoReadCount,
		arg.IoWriteCount,
		arg.Oom,
		arg.OomKill,
		arg.VoluntaryContextSwitch,
		arg.InvoluntaryContextSwitch,
		arg.Token,
		arg.MaxFileSize,
		arg.ExitCode,
		arg.TimingReal,
		arg.CompilerOptions,
		arg.CommandLineArguments,
		arg.AdditionalFiles,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Stderr,
		arg.CpuHistory,
		arg.CpuAverage,
		arg.CpuMax,
		arg.TimingUser,
		arg.TimingSys,
	)
	return err
}

const getSubmission = `-- name: GetSubmission :one
SELECT id, source_code, language_id, stdin, stdout, status_id, memory, memory_history, memory_min, memory_max, kernel_stack_bytes, page_faults, major_page_faults, io_read_bytes, io_write_bytes, io_read_count, io_write_count, oom, oom_kill, voluntary_context_switch, involuntary_context_switch, token, max_file_size, exit_code, timing_real, compiler_options, command_line_arguments, additional_files, created_at, updated_at, stderr, cpu_history, cpu_average, cpu_max, timing_user, timing_sys
FROM public.submissions
WHERE token = $1
`

func (q *Queries) GetSubmission(ctx context.Context, token pgtype.Text) (Submission, error) {
	row := q.db.QueryRow(ctx, getSubmission, token)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.SourceCode,
		&i.LanguageID,
		&i.Stdin,
		&i.Stdout,
		&i.StatusID,
		&i.Memory,
		&i.MemoryHistory,
		&i.MemoryMin,
		&i.MemoryMax,
		&i.KernelStackBytes,
		&i.PageFaults,
		&i.MajorPageFaults,
		&i.IoReadBytes,
		&i.IoWriteBytes,
		&i.IoReadCount,
		&i.IoWriteCount,
		&i.Oom,
		&i.OomKill,
		&i.VoluntaryContextSwitch,
		&i.InvoluntaryContextSwitch,
		&i.Token,
		&i.MaxFileSize,
		&i.ExitCode,
		&i.TimingReal,
		&i.CompilerOptions,
		&i.CommandLineArguments,
		&i.AdditionalFiles,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Stderr,
		&i.CpuHistory,
		&i.CpuAverage,
		&i.CpuMax,
		&i.TimingUser,
		&i.TimingSys,
	)
	return i, err
}

const insertSubmissionAiReaction = `-- name: InsertSubmissionAiReaction :exec
INSERT INTO public.submission_ai_reactions
(id, reaction, created_at, updated_at, judgetoken)
VALUES(nextval('submission_ai_reactions_id_seq'::regclass), $1, now(), now(), $2)
`

type InsertSubmissionAiReactionParams struct {
	Reaction   string
	Judgetoken string
}

func (q *Queries) InsertSubmissionAiReaction(ctx context.Context, arg InsertSubmissionAiReactionParams) error {
	_, err := q.db.Exec(ctx, insertSubmissionAiReaction, arg.Reaction, arg.Judgetoken)
	return err
}

const querySubmissionAiReaction = `-- name: QuerySubmissionAiReaction :one
SELECT id, reaction, created_at, updated_at, deleted_at, judgetoken
FROM public.submission_ai_reactions
WHERE judgetoken = $1
`

func (q *Queries) QuerySubmissionAiReaction(ctx context.Context, judgetoken string) (SubmissionAiReaction, error) {
	row := q.db.QueryRow(ctx, querySubmissionAiReaction, judgetoken)
	var i SubmissionAiReaction
	err := row.Scan(
		&i.ID,
		&i.Reaction,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Judgetoken,
	)
	return i, err
}

const updateSubmissionStatus = `-- name: UpdateSubmissionStatus :exec
UPDATE
  public.submissions
SET
  status_id = $1
WHERE
  token = $2
`

type UpdateSubmissionStatusParams struct {
	StatusID pgtype.Int4
	Token    pgtype.Text
}

func (q *Queries) UpdateSubmissionStatus(ctx context.Context, arg UpdateSubmissionStatusParams) error {
	_, err := q.db.Exec(ctx, updateSubmissionStatus, arg.StatusID, arg.Token)
	return err
}

const updateSubmissionWithResult = `-- name: UpdateSubmissionWithResult :exec
UPDATE
  public.submissions
SET
  "stdin" = $1,
  "stdout" = $2,
  status_id = $3,
  cpu_history = $4,
  memory = $5,
  memory_history = $6,
  memory_min = $7,
  memory_max = $8,
  kernel_stack_bytes = $9,
  page_faults = $10,
  major_page_faults = $11,
  io_read_bytes = $12,
  io_write_bytes = $13,
  io_read_count = $14,
  io_write_count = $15,
  oom = $16,
  oom_kill = $17,
  voluntary_context_switch = $18,
  involuntary_context_switch = $19,
  exit_code = $20,
  timing_real = $21,
  compiler_options = $22,
  command_line_arguments = $23,
  additional_files = $24,
  updated_at = $25,
  stderr = $26,
  cpu_average = $27,
  cpu_max = $28,
  timing_user = $29,
  timing_sys = $30
WHERE
  token = $31
`

type UpdateSubmissionWithResultParams struct {
	Stdin                    pgtype.Text
	Stdout                   pgtype.Text
	StatusID                 pgtype.Int4
	CpuHistory               []byte
	Memory                   pgtype.Int4
	MemoryHistory            interface{}
	MemoryMin                pgtype.Int4
	MemoryMax                pgtype.Int4
	KernelStackBytes         pgtype.Int4
	PageFaults               pgtype.Int4
	MajorPageFaults          pgtype.Int4
	IoReadBytes              pgtype.Int4
	IoWriteBytes             pgtype.Int4
	IoReadCount              pgtype.Int4
	IoWriteCount             pgtype.Int4
	Oom                      pgtype.Int4
	OomKill                  pgtype.Int4
	VoluntaryContextSwitch   pgtype.Int4
	InvoluntaryContextSwitch pgtype.Int4
	ExitCode                 pgtype.Int4
	TimingReal               pgtype.Float4
	CompilerOptions          pgtype.Text
	CommandLineArguments     pgtype.Text
	AdditionalFiles          []byte
	UpdatedAt                pgtype.Timestamp
	Stderr                   pgtype.Text
	CpuAverage               pgtype.Float4
	CpuMax                   pgtype.Float4
	TimingUser               pgtype.Float4
	TimingSys                pgtype.Float4
	Token                    pgtype.Text
}

func (q *Queries) UpdateSubmissionWithResult(ctx context.Context, arg UpdateSubmissionWithResultParams) error {
	_, err := q.db.Exec(ctx, updateSubmissionWithResult,
		arg.Stdin,
		arg.Stdout,
		arg.StatusID,
		arg.CpuHistory,
		arg.Memory,
		arg.MemoryHistory,
		arg.MemoryMin,
		arg.MemoryMax,
		arg.KernelStackBytes,
		arg.PageFaults,
		arg.MajorPageFaults,
		arg.IoReadBytes,
		arg.IoWriteBytes,
		arg.IoReadCount,
		arg.IoWriteCount,
		arg.Oom,
		arg.OomKill,
		arg.VoluntaryContextSwitch,
		arg.InvoluntaryContextSwitch,
		arg.ExitCode,
		arg.TimingReal,
		arg.CompilerOptions,
		arg.CommandLineArguments,
		arg.AdditionalFiles,
		arg.UpdatedAt,
		arg.Stderr,
		arg.CpuAverage,
		arg.CpuMax,
		arg.TimingUser,
		arg.TimingSys,
		arg.Token,
	)
	return err
}
